// -------------------------
// Dino-lution Grammar
// -------------------------

Program:
    ( Comment| statements+=Statement)
;

Comment:
    /\/\/.*$/
;

// Top‐level statements
Statement:
      DinoDecl
    | FunctionDecl
    | ActionStmt
    | ControlStmt
    | TickStmt
;

// ——— Tick ———
TickStmt:
    'tick' count=INT
;

// ——— Dino Declaration ———
DinoDecl:
    'dino' name=ID '{'
        traits+=Trait
        ( 'food' ':' initFood=INT )?
    '}'
;

// ——— Trait ———
Trait:
    name=ID ':' value=Value
;

// ——— Functions ———
FunctionDecl:
    'function' name=ID '(' 'dino' param=ID ')' '{'
        statements+=Statement
    '}'
;

// ——— Actions ———
ActionStmt:
      FeedStmt
    | MutateStmt
    | BreedStmt
;

FeedStmt:
    'feed' '(' target=ID ',' food=Value ')'
;

MutateStmt:
    'mutate' '(' target=ID ',' mutation=MutationExpr ')'
;

BreedStmt:
    'breed' '(' parent1=ID ',' parent2=ID ')' breedBlock=BreedBlock
;

BreedBlock:
    '{' mutations+=MutationExpr* '}'
;

MutationExpr:
    'mutate' '(' trait=ID ',' (op=MutationOp? value=Value) ')'
;

MutationOp:
    '+' | '-' | '='
;

// ——— Control Structures ———
ControlStmt:
      IfStmt
    | RepeatStmt
;

IfStmt:
    'if' condition=Condition block=Block
    ( 'else' elseBlock=Block )?
;

RepeatStmt:
    'repeat' count=Expr 'times' block=Block
;

Condition:
    left=Expr op=CompOp right=Expr
;

CompOp:
    '>' | '<' | '>=' | '<=' | '==' | '!='
;

Block:
    '{' statements+=Statement* '}'
;

// ——— Expressions & Values ———
Expr:
    head=Value (binop=BinOp right=Value)*
;

Value:
      INT
    | STRING
    | 'random'
    | ID '.' ID     // e.g. Counter.strength
;

BinOp:
    '+' | '-' | '*' | '/' | '%'
;
